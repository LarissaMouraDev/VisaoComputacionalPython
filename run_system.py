#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do Sistema IoT de Detec√ß√£o de Motocicletas
Executa todos os componentes de forma coordenada conforme requisitos do projeto
"""

import subprocess
import sys
import time
import threading
import signal
import os
import json
import logging
from datetime import datetime

class SystemLauncher:
    """
    Gerenciador de inicializa√ß√£o e coordena√ß√£o do sistema completo
    """
    
    def __init__(self):
        self.processes = {}
        self.running = False
        self.setup_logging()
        
        # Verificar depend√™ncias
        self.check_dependencies()
        
        # Configura√ß√µes
        self.load_config()
        
        print("üöÄ Sistema IoT de Detec√ß√£o de Motocicletas")
        print("=" * 50)
        print("üìã Arquiteturas Disruptivas: IoT, IoB & IA Generativa")
        print("üë§ Desenvolvido por: Larissa Moura")
        print("üè´ FIAP - 2024")
        print("=" * 50)
    
    def setup_logging(self):
        """Configura logging do launcher"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - LAUNCHER - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('system_launcher.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def load_config(self):
        """Carrega configura√ß√µes do sistema"""
        try:
            if os.path.exists('config.json'):
                with open('config.json', 'r') as f:
                    self.config = json.load(f)
                self.logger.info("Configura√ß√µes carregadas com sucesso")
            else:
                self.logger.warning("Arquivo config.json n√£o encontrado, usando padr√µes")
                self.config = self.get_default_config()
        except Exception as e:
            self.logger.error(f"Erro ao carregar configura√ß√µes: {e}")
            self.config = self.get_default_config()
    
    def get_default_config(self):
        """Retorna configura√ß√µes padr√£o"""
        return {
            "mqtt": {"broker": "localhost", "port": 1883},
            "dashboard": {"host": "0.0.0.0", "port": 5000},
            "detection": {"confidence_threshold": 0.5}
        }
    
    def check_dependencies(self):
        """Verifica depend√™ncias do sistema"""
        print("üîç Verificando depend√™ncias...")
        
        required_modules = [
            'cv2', 'numpy', 'flask', 'paho.mqtt.client', 
            'pandas', 'sqlite3', 'socketio'
        ]
        
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module)
                print(f"  ‚úÖ {module}")
            except ImportError:
                missing_modules.append(module)
                print(f"  ‚ùå {module}")
        
        if missing_modules:
            print(f"\n‚ö†Ô∏è M√≥dulos faltando: {', '.join(missing_modules)}")
            print("Execute: pip install -r requirements.txt")
            sys.exit(1)
        
        print("‚úÖ Todas as depend√™ncias est√£o instaladas!")
    
    def start_mqtt_broker(self):
        """Inicia broker MQTT se necess√°rio"""
        try:
            # Verificar se mosquitto est√° rodando
            result = subprocess.run(['pgrep', 'mosquitto'], capture_output=True)
            if result.returncode != 0:
                print("üîå Iniciando broker MQTT...")
                self.processes['mqtt_broker'] = subprocess.Popen(
                    ['mosquitto', '-v'],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                time.sleep(2)
                print("‚úÖ Broker MQTT iniciado")
            else:
                print("‚úÖ Broker MQTT j√° est√° rodando")
        except FileNotFoundError:
            print("‚ö†Ô∏è Mosquitto n√£o encontrado. Usando simula√ß√£o interna.")
    
    def start_components(self):
        """Inicia todos os componentes do sistema"""
        components = [
            {
                'name': 'mqtt_simulator',
                'script': 'mqtt_simulator.py',
                'description': 'Simulador de Sensores MQTT',
                'delay': 2
            },
            {
                'name': 'database_manager',
                'script': 'database_manager.py',
                'description': 'Gerenciador de Banco de Dados',
                'delay': 1
            },
            {
                'name': 'main_system',
                'script': 'main.py',
                'description': 'Sistema Principal Integrado',
                'delay': 3
            }
        ]
        
        for component in components:
            print(f"üöÄ Iniciando {component['description']}...")
            try:
                self.processes[component['name']] = subprocess.Popen(
                    [sys.executable, component['script']],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                time.sleep(component['delay'])
                print(f"‚úÖ {component['description']} iniciado")
            except Exception as e:
                print(f"‚ùå Erro ao iniciar {component['description']}: {e}")
    
    def show_status(self):
        """Mostra status dos componentes"""
        print("\nüìä STATUS DOS COMPONENTES")
        print("-" * 30)
        
        for name, process in self.processes.items():
            if process.poll() is None:
                status = "üü¢ RODANDO"
            else:
                status = "üî¥ PARADO"
            print(f"{name}: {status}")
        
        # URLs importantes
        print("\nüåê ACESSO AO SISTEMA")
        print("-" * 20)
        dashboard_port = self.config.get('dashboard', {}).get('port', 5000)
        print(f"Dashboard Web: http://localhost:{dashboard_port}")
        print("Controles do sistema:")
        print("  - 'q' + Enter: Sair")
        print("  - 's' + Enter: Status")
        print("  - 'r' + Enter: Reiniciar componentes")
        print("  - 'l' + Enter: Ver logs")
    
    def show_logs(self):
        """Mostra logs recentes do sistema"""
        print("\nüìÑ LOGS RECENTES")
        print("-" * 20)
        
        log_files = ['system_launcher.log', 'system.log', 'mqtt.log']
        
        for log_file in log_files:
            if os.path.exists(log_file):
                print(f"\nüìã {log_file}:")
                try:
                    with open(log_file, 'r') as f:
                        lines = f.readlines()
                        # Mostrar √∫ltimas 5 linhas
                        for line in lines[-5:]:
                            print(f"  {line.strip()}")
                except Exception as e:
                    print(f"  Erro ao ler log: {e}")
    
    def restart_components(self):
        """Reinicia todos os componentes"""
        print("üîÑ Reiniciando componentes...")
        self.stop_all()
        time.sleep(3)
        self.start_mqtt_broker()
        self.start_components()
        print("‚úÖ Componentes reiniciados")
    
    def run_interactive_demo(self):
        """Executa demonstra√ß√£o interativa dos casos de teste"""
        print("\nüéØ DEMONSTRA√á√ÉO INTERATIVA")
        print("=" * 30)
        
        test_cases = [
            {
                'name': 'Moto Desaparecida',
                'description': 'Simula motocicleta que some do estacionamento',
                'duration': 30
            },
            {
                'name': 'Moto no Lugar Errado',
                'description': 'Motocicleta estacionada em local inadequado', 
                'duration': 45
            },
            {
                'name': 'M√∫ltiplas Detec√ß√µes',
                'description': 'V√°rias motocicletas chegando simultaneamente',
                'duration': 60
            }
        ]
        
        print("Casos de teste dispon√≠veis:")
        for i, test in enumerate(test_cases, 1):
            print(f"{i}. {test['name']} - {test['description']}")
        
        try:
            choice = input("\nEscolha um caso para demonstrar (1-3) ou Enter para pular: ")
            if choice.isdigit() and 1 <= int(choice) <= 3:
                selected_test = test_cases[int(choice) - 1]
                print(f"\nüß™ Executando: {selected_test['name']}")
                print(f"üìã {selected_test['description']}")
                print(f"‚è±Ô∏è Dura√ß√£o: {selected_test['duration']} segundos")
                print("üé¨ Acompanhe os resultados no dashboard!")
                
                # Aqui voc√™ poderia executar o caso de teste espec√≠fico
                # Por exemplo, enviar comandos MQTT espec√≠ficos
                
        except (ValueError, KeyboardInterrupt):
            pass
    
    def handle_user_input(self):
        """Manipula entrada do usu√°rio"""
        while self.running:
            try:
                command = input().strip().lower()
                
                if command == 'q':
                    print("üõë Encerrando sistema...")
                    self.running = False
                    break
                elif command == 's':
                    self.show_status()
                elif command == 'r':
                    self.restart_components()
                elif command == 'l':
                    self.show_logs()
                elif command == 'd':
                    self.run_interactive_demo()
                elif command == 'h':
                    self.show_help()
                    
            except (EOFError, KeyboardInterrupt):
                self.running = False
                break
    
    def show_help(self):
        """Mostra ajuda dos comandos"""
        print("\n‚ùì COMANDOS DISPON√çVEIS")
        print("-" * 20)
        print("q - Sair do sistema")
        print("s - Mostrar status")
        print("r - Reiniciar componentes")
        print("l - Ver logs recentes")
        print("d - Demonstra√ß√£o interativa")
        print("h - Mostrar esta ajuda")
    
    def stop_all(self):
        """Para todos os processos"""
        for name, process in self.processes.items():
            if process.poll() is None:
                print(f"üõë Parando {name}...")
                process.terminate()
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    process.kill()
        
        self.processes.clear()
    
    def signal_handler(self, signum, frame):
        """Manipula sinais do sistema"""
        self.logger.info(f"Recebido sinal {signum}")
        self.running = False
    
    def run(self):
        """Executa o sistema completo"""
        # Configurar handlers de sinal
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        self.running = True
        
        try:
            # Iniciar broker MQTT
            self.start_mqtt_broker()
            
            # Iniciar componentes
            self.start_components()
            
            # Mostrar status inicial
            time.sleep(3)
            self.show_status()
            
            # Demonstra√ß√£o interativa opcional
            demo_choice = input("\nüéØ Executar demonstra√ß√£o interativa? (s/N): ")
            if demo_choice.lower() in ['s', 'sim', 'yes', 'y']:
                self.run_interactive_demo()
            
            print("\nüí° Sistema rodando! Digite 'h' para ver comandos dispon√≠veis.")
            
            # Thread para entrada do usu√°rio
            input_thread = threading.Thread(target=self.handle_user_input, daemon=True)
            input_thread.start()
            
            # Loop principal
            while self.running:
                time.sleep(1)
                
                # Verificar se processos ainda est√£o rodando
                for name, process in list(self.processes.items()):
                    if process.poll() is not None:
                        self.logger.warning(f"Processo {name} parou inesperadamente")
        
        except Exception as e:
            self.logger.error(f"Erro no sistema principal: {e}")
        
        finally:
            print("\nüßπ Limpando recursos...")
            self.stop_all()
            print("‚úÖ Sistema encerrado com sucesso!")


def main():
    """Fun√ß√£o principal"""
    launcher = SystemLauncher()
    launcher.run()


if __name__ == "__main__":
    main()